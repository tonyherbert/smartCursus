// Organization model
// Subscribtion, permissions etc... need to be defined for an "organization"
// An organization is a group of users
// A user can be part of multiple organizations
// See : https://www.flightcontrol.dev/blog/ultimate-guide-to-multi-tenant-saas-data-modeling

model Organization {
  id               String           @id @default(nanoid(11))
  slug             String           @unique @default(nanoid(6))
  name             String
  image            String?
  planId           String           @default("FREE")
  plan             OrganizationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  email            String
  stripeCustomerId String?
  members OrganizationMembership[]
  levels  Level[]
  classrooms Classroom[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subjects   Subject[]
  questions  Question[]
  courses    Course[]


  @@index([slug])
}

model OrganizationMembership {
  id    String                       @id @default(nanoid(11))
  roles OrganizationMembershipRole[] @default([MEMBER])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Membership")
}

enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
}

// The plan need to be created AND updated INSIDE migrations
// Please follow https://to.codeline.app/nowts-limitations for more informations
model OrganizationPlan {
  id             String @id @default(nanoid(11))
  name           String
  maximumMembers Int    @default(100)
  maximumLevels  Int    @default(2)
  maximumClasses Int    @default(4)
  organization   Organization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Level {
  id             String        @id @default(nanoid(11))
  name           String
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  classrooms     Classroom[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id        String   @id @default(nanoid(11))
  name      String
  levelId   String?
  level     Level?    @relation(fields: [levelId], references: [id], onDelete: SetNull)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id             String           @id @default(nanoid(11))
  name           String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions      Question[]
  courses        Course[]        // Ajout de la relation inverse
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum QuestionType {
  COURSE
  PRACTICE
  EVALUATION
  EXAM
}

model Question {
  id             String           @id @default(nanoid(11))
  content        String
  type           QuestionType     @default(COURSE)
  subjectId      String?
  subject        Subject?         @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// Course related models
model Course {
  id             String           @id @default(nanoid(11))
  title          String
  description    String
  content        String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subjectId      String?         // Optionnel avec '?'
  subject        Subject?        @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}
